// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  registraciones Registracion[]
  role          String
  password      String
  userInfo       UserInfo[]
  citas         Cita[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cmedicos Cmedico[]
  passports Passport[]
  fingerPrints FingerPrints[]
  visas Visa[]
  visaPayments VisaPayment[]

  @@map("users") 
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])

  @@map("verification_tokens")
}
 
 model UserInfo {
  id String @id @default(cuid())
  name String
  surname String
  userId String
  birthdate String
  imageUrl  String
  passportNum String
  phoneNumber String
  nacionality String
  user User @relation(fields: [userId], references: [id])

  @@map("user_info")
}

model Registracion {
  id String @id @default(cuid())
  userId String
  residence String
  city  String
  adress String
  apartamentNumber String 
  validation String 
  finished DateTime 
  imageUrl  String?
  
  user  User @relation(fields: [userId], references: [id])

  @@map("Registracion")
}
  
  model Cmedico{
    id String @id @default(cuid())
  userId String
  serial String
  datedoc String 
  numberdoc  String
  imageUrl  String?
  
  user  User @relation(fields: [userId], references: [id])

  @@map("Cmedico")
}
  
  model Passport{
id String @id @default(cuid())
  userId String
  seriall String
  numberpas String
  emisionp String
  datepas String 
  imageUrl  String?
  
  user  User @relation(fields: [userId], references: [id])

  @@map("Passport")
}

model FingerPrints{
  id String @id @default(cuid())
  userId String
  serialf String
  numberf String
  datef String 
  emision String
  imageUrl  String?
  
  user  User @relation(fields: [userId], references: [id])

  @@map("FingerPrints")
  
}

model Visa {
  id String @id @default(cuid())
  userId String
  namev String
  surnamev String
  nump String 
  emisiondate String
  entry String
  until String
  imageUrl  String?
  
  user  User @relation(fields: [userId], references: [id])

  @@map("Visa")

}

model Cita {
  id          Int      @id @default(autoincrement())
  fecha       DateTime
  title       String?
  descripcion String?
  hora        DateTime
  clienteId   String
  inicio      DateTime
  fin         DateTime
  
  direccion   String 
  cliente     User   @relation(fields: [clienteId], references: [id])
  creadoEn    DateTime @default(now())
  actualizadoEn DateTime? @updatedAt

  @@index([fecha])
  @@map("Cita")
}

model VisaPayment {
  id             Int      @id @default(autoincrement())
  userId         String
  amount         Decimal
  date           DateTime @default(now())

  user  User @relation(fields: [userId], references: [id])
}
